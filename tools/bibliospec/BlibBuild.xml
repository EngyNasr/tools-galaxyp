<tool id="BlibBuild" name="BlibBuild" version="@VERSION@.0">
    <description>create a library of peptide MS/MS spectra</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        ## Need to symlink to data using name with extension that recognizes 
        #import re
        #set $exts = {'mgf':'MGF', 'mzml':'mzML', 'mzxml':'mzXML', 'ms2': 'ms2', 'wiff':'wiff'}
        #for $pl in $peak_lists:
            #set $dt = $pl.extension
            #set $bn = $pl.display_name.split('/')[-1]
            #set $ext = $exts[$dt.lower()]
            #set $input_name = $re.sub(r'(?i)[.]' + '$dt',r'.' + '$ext','$bn')
            ln -s -f '${pl}' '${input_name}' &&
            #set $encoded_id = $__app__.security.encode_id($pl.id)
            echo "Spectrums:${pl.display_name}(API:${encoded_id}) " &&
        #end for
        #set $ext = $identification.extension
        #set $ident = $identification.display_name.split('/')[-1].replace($identification.extension, "") + "." + $ext
        ln -s -f '$identification' '$ident' &&
        #if $existing_blib:
            cp '$existing_blib' spectra.blib &&
        #end if
        BlibBuild 
        #if str($cutoff) is not 'None': 
            -c $cutoff
        #end if
        #if $authority: 
            -a $authority
        #end if
        #if $library_id: 
            -i $library_id
        #end if
        '$ident' spectra.blib
        && cp spectra.blib $blib
        #if $convert_to_ms2:
            && BlibToMs2 -f '$ms2' spectra.blib
        #end if
    ]]></command>
    <inputs>
        <param name="identification" type="data" format="mzid" label="Peptide Identification Results" >
            <help>
            </help>
        </param>
        <param name="peak_lists" type="data" format="mzml,mzxml,mgf" multiple="true" optional="true" 
            label="Spectrum Datasets used in the peptide identification"/>
        <param name="existing_blib" type="data" format="sqlite" label="Add to existing Blib" optional="true"/>
        <param name="cutoff" type="float" value="" min="0.0" max="1.0" optional="true" 
            label="Specify the cutoff score (0-1)" 
            help=" below which peptide-spectrum matches will be excluded from the library."/>
        <param name="authority" type="text" value="" optional="true" label="LSID authority. Default proteome.gs.washington.edu"/>
        <param name="library_id" type="text" value="" optional="true" label="LSID library ID. Default uses file name"/>
        <param name="convert_to_ms2" type="boolean" truevalue="yes" falsevalue="no" label="Output a MS2"/>
    </inputs>
    <outputs>
        <data name="blib" format="sqlite" label="Blib from ${on_string}" from_work_dir="spectra.blib" />
        <data name="ms2" format="ms2" label="MS2 from ${on_string}" from_work_dir="spectra.ms2" >
            <filter>convert_to_ms2 == True</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="identification" ftype="mzid" value="msgf-test.mzid"/>
            <param name="peak_lists" ftype="mzml" value="msgf-test.mzML"/>
            <param name="convert_to_ms2" value="True"/>
            <output name="ms2">
                <assert_contents>
                    <has_text text="D\tseq\tFKWNGTDTNSAAEK" />
                    <has_text text="D\tmodified seq\tFKWNGTDTNSAAEK" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
BiblioSpec_ is a suite of software tools for creating and searching MS/MS peptide spectrum libraries.

BlibBuild_ creates a library of peptide MS/MS spectra from a variety of different database search results. 

::

  Usage: BlibBuild [options] <*.blib|*.pep.xml|*.pep.XML|*.pepXML|*.sqt|*.perc.xml|*.dat|*.xtan.xml|*.idpXML|*.group.xml|*.pride.xml|*.msf|*.pdResult|*.mzid|*msms.txt|*final_fragment.csv|*.proxl.xml|*.ssl|*.mlb|*.tsv|*.osw>+ <library_name>
   -o                Overwrite existing library. Default append.
   -S  <filename>    Read from file as though it were stdin.
   -s                Result file names from stdin. e.g. ls *sqt | BlibBuild -s new.blib.
   -u                Ignore peptides except those with the unmodified sequences from stdin.
   -U                Ignore peptides except those with the modified sequences from stdin.
   -H                Use more than one decimal place when describing mass modifications.
   -C  <file size>   Minimum file size required to use caching for .dat files.  Specifiy units as B,K,G or M.  Default 800M.
   -c <cutoff>       Score threshold (0-1) for PSMs to be included in library. Higher threshold is more exclusive.
   -v  <level>       Level of output to stderr (silent, error, status, warn).  Default status.
   -L                Write status and warning messages to log file.
   -m <size>         SQLite memory cache size in Megs. Default 250M.
   -l <level>        ZLib compression level (0-?). Default 3.
   -i <library_id>   LSID library ID. Default uses file name.
   -a <authority>    LSID authority. Default proteome.gs.washington.edu.
   -x <filename>     Specify the path of XML modifications file for parsing MaxQuant files.
   -P <float>        Specify pusher interval for Waters final_fragment.csv files.
   -d [<filename>]   Document the .blib format by writing SQLite commands to a file, or stdout if no filename is given.


.. _BlibBuild: https://skyline.ms/wiki/home/software/BiblioSpec/page.view?name=BlibBuild
.. _BiblioSpec: https://skyline.ms/project/home/software/BiblioSpec/begin.view?
    ]]></help>
    <expand macro="citations" />
</tool>
